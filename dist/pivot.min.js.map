{"version":3,"sources":["pivot.coffee","pivot.min.js"],"names":["callWithJQuery","indexOf","item","i","l","this","length","slice","bind","fn","me","apply","arguments","hasProp","hasOwnProperty","pivotModule","exports","module","require","define","amd","jQuery","$","PivotData","addSeparators","aggregatorTemplates","aggregators","dayNamesEn","derivers","getSort","locales","mthNamesEn","naturalSort","numberFormat","pivotTableRenderer","rd","renderers","rx","rz","sortAs","usFmt","usFmtInt","usFmtPct","zeroPad","nStr","thousandsSep","decimalSep","rgx","x","x1","x2","split","test","replace","opts","defaults","digitsAfterDecimal","scaler","prefix","suffix","showZero","extend","result","isNaN","isFinite","toFixed","count","formatter","data","rowKey","colKey","push","value","format","countUnique","arg","attr","uniq","record","ref","call","numInputs","listUnique","sep","join","sum","parseFloat","min","val","Math","max","first","sorter","sorters","last","average","len","sumOverSum","denom","num","sumNum","sumDenom","sumOverSumBound80","upper","sign","sqrt","fractionOf","wrapped","type","selector","total","row","col","inner","getAggregator","tpl","Count","Count Unique Values","List Unique Values","Sum","Integer Sum","Average","Minimum","Maximum","First","Last","Sum over Sum","80% Upper Bound","80% Lower Bound","Sum as Fraction of Total","Sum as Fraction of Rows","Sum as Fraction of Columns","Count as Fraction of Total","Count as Fraction of Rows","Count as Fraction of Columns","Table","Table Barchart","barchart","Heatmap","heatmap","Row Heatmap","Col Heatmap","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","export","cancel","totals","vs","by","number","substr","bin","binWidth","dateFormat","formatString","utcOutput","mthNames","dayNames","utc","date","Date","parse","m","p","_this","as","bs","a","a1","b","b1","nas","nbs","String","match","shift","order","l_mapping","mapping","toLowerCase","sort","isFunction","input","ref1","ref2","ref3","ref4","ref5","ref6","ref7","ref8","ref9","getRowKeys","getColKeys","sortKeys","arrSort","aggregator","aggregatorName","colAttrs","cols","rowAttrs","rows","valAttrs","vals","rowOrder","colOrder","derivedAttributes","filter","tree","rowKeys","colKeys","rowTotals","colTotals","allTotal","sorted","forEachRecord","processRecord","f","addRecord","compactRecord","j","k","len1","results","results1","tblCols","isEmptyObject","v","isArray","each","text","Error","prototype","forEachMatchingRecord","criteria","callback","attrs","sortersArr","comparison","r","c","flatColKey","flatRowKey","len2","n","fromCharCode","agg","pivotUtilities","pivotData","cellModal","getClickHandler","getMouseOutCallback","getMouseOverHandler","spanSize","tbody","td","th","thead","totalAggregator","tr","txt","table","clickCallback","mouseOverCallback","mouseOutCallback","rowValues","colValues","filters","e","document","createElement","className","arr","noDraw","stop","parseInt","setAttribute","appendChild","textContent","innerHTML","onclick","onmouseover","onmouseout","pivot","inputOpts","locale","localeDefaults","dataClass","renderer","rendererOptions","error","console","stack","html","hasChildNodes","removeChild","lastChild","append","pivotUI","overwrite","attrLength","attrValues","colOrderArrow","existingOpts","exportButton","exporter","getRenderOptions","initialRender","len3","materializedInput","o","ordering","pivotTable","pivotTableExporter","recordsProcessed","refresh","refreshDelayed","rendererControl","rowOrderArrow","shownAttributes","tr1","tr2","uiTable","unused","unusedAttrsVerticalAutoCutoff","unusedAttrsVerticalAutoOverride","exporters","hiddenAttributes","menuLimit","exclusions","inclusions","unusedAttrsVertical","autoSortUnusedAttrs","onRefresh","base","class","addClass","appendTo","attrElem","checkContainer","closeFilterBox","controls","filterItem","filterItemExcluded","finalButtons","hasExcludedItem","placeholder","triangleLink","valueCount","valueList","values","hide","accept","accept_gen","trim","accepted","real_filter","substring","startsWith","find","parent","show","prop","toggleClass","removeClass","left","top","currentTarget","position","css","key_a_to_z","rowSymbol","colSymbol","next","value_a_to_z","value_z_to_a","role","prepend","inArray","rendererName","pivotUIOptions","subopts","unusedAttrsContainer","inclusionsInfo","children","setTimeout","len4","newDropdown","numInputsToProcess","pvtVals","q","s","remove","not","excludedItems","sortable","update","ui","sender","connectWith","items","scope","colorScaleGenerator","heatmapper","numCols","numRows","nonRed","round","colorScale","forEachCell","elem","barcharter","wrapper","height","bottom","right","background-color","padding-left","padding-right","padding","padding-top","text-align"],"mappings":"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","file":"pivot.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n\ncallWithJQuery ($) ->\n\n    ###\n    Utilities\n    ###\n\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\n        nStr += ''\n        x = nStr.split('.')\n        x1 = x[0]\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\n        rgx = /(\\d+)(\\d{3})/\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\n        return x1 + x2\n\n    numberFormat = (opts) ->\n        defaults =\n            digitsAfterDecimal: 2, scaler: 1,\n            thousandsSep: \",\", decimalSep: \".\"\n            prefix: \"\", suffix: \"\"\n            showZero: false\n        opts = $.extend({}, defaults, opts)\n        (x) ->\n            return \"\" if isNaN(x) or not isFinite(x)\n            return \"\" if x == 0 and not opts.showZero\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\n            return \"\"+opts.prefix+result+opts.suffix\n    \n    #aggregator templates default to US number formatting but this is overrideable\n    usFmt = numberFormat()\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\n\n    aggregatorTemplates =\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\n            count: 0\n            push:  -> @count++\n            value: -> @count\n            format: formatter\n\n        countUnique: (formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> @uniq.length\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        listUnique: (sep) -> ([attr]) -> (data, rowKey, colKey)  ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> @uniq.join sep\n            format: (x) -> x\n            numInputs: if attr? then 0 else 1\n\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\n            value: -> @sum\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        min: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            push: (record) ->\n                x = parseFloat(record[attr])\n                if not isNaN x then @val = Math.min(x, @val ? x)\n            value: -> @val\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        max: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            push: (record) ->\n                x = parseFloat(record[attr])\n                if not isNaN x then @val = Math.max(x, @val ? x)\n            value: -> @val\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        first: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            sorter: getSort(data?.sorters, attr)\n            push: (record) ->\n                x = record[attr]\n                @val = x if @sorter(x, @val ? x) <= 0\n            value: -> @val\n            format: (x) -> if isNaN(x) then x else formatter(x)\n            numInputs: if attr? then 0 else 1\n\n        last: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            sorter: getSort(data?.sorters, attr)\n            push: (record) ->\n                x = record[attr]\n                @val = x if @sorter(x, @val ? x) >= 0\n            value: -> @val\n            format: (x) -> if isNaN(x) then x else formatter(x)\n            numInputs: if attr? then 0 else 1\n\n        average:  (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            len: 0\n            push: (record) ->\n                if not isNaN parseFloat(record[attr])\n                    @sum += parseFloat(record[attr])\n                    @len++\n            value: -> @sum/@len\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: -> @sumNum/@sumDenom\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        sumOverSumBound80: (upper=true, formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: ->\n                sign = if upper then 1 else -1\n                (0.821187207574908/@sumDenom + @sumNum/@sumDenom + 1.2815515655446004*sign*\n                    Math.sqrt(0.410593603787454/ (@sumDenom*@sumDenom) + (@sumNum*(1 - @sumNum/ @sumDenom))/ (@sumDenom*@sumDenom)))/\n                    (1 + 1.642374415149816/@sumDenom)\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (x...) -> (data, rowKey, colKey) ->\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\n            inner: wrapped(x...)(data, rowKey, colKey)\n            push: (record) -> @inner.push record\n            format: formatter\n            value: -> @inner.value() / data.getAggregator(@selector...).inner.value()\n            numInputs: wrapped(x...)().numInputs\n\n    #default aggregators & renderers use US naming and number formatting\n    aggregators = do (tpl = aggregatorTemplates) ->\n        \"Count\":                tpl.count(usFmtInt)\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\n        \"List Unique Values\":   tpl.listUnique(\", \")\n        \"Sum\":                  tpl.sum(usFmt)\n        \"Integer Sum\":          tpl.sum(usFmtInt)\n        \"Average\":              tpl.average(usFmt)\n        \"Minimum\":              tpl.min(usFmt)\n        \"Maximum\":              tpl.max(usFmt)\n        \"First\":                tpl.first(usFmt)\n        \"Last\":                 tpl.last(usFmt)\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt)\n        \"80% Upper Bound\":      tpl.sumOverSumBound80(true, usFmt)\n        \"80% Lower Bound\":      tpl.sumOverSumBound80(false, usFmt)\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct)\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct)\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct)\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct)\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct)\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\n\n    renderers =\n        \"Table\":          (data, opts) ->   pivotTableRenderer(data, opts)\n        \"Table Barchart\": (data, opts) -> $(pivotTableRenderer(data, opts)).barchart()\n        \"Heatmap\":        (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\",    opts)\n        \"Row Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts)\n        \"Col Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts)\n    \n    locales =\n        en:\n            aggregators: aggregators\n            renderers: renderers\n            localeStrings:\n                renderError: \"An error occurred rendering the PivotTable results.\"\n                computeError: \"An error occurred computing the PivotTable results.\"\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\n                selectAll: \"Select All\"\n                selectNone: \"Select None\"\n                tooMany: \"(too many to list)\"\n                filterResults: \"Filter values\"\n                export: 'Export'\n                apply: \"Apply\"\n                cancel: \"Cancel\"\n                totals: \"Totals\" #for table renderer\n                vs: \"vs\" #for gchart renderer\n                by: \"by\" #for gchart renderer\n\n    #dateFormat deriver l10n requires month and day names to be passed in directly\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\n\n    derivers =\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\n        dateFormat: (col, formatString, utcOutput=false, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\n            utc = if utcOutput then \"UTC\" else \"\"\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\n                date = new Date(Date.parse(record[col]))\n                if isNaN(date) then return \"\"\n                formatString.replace /%(.)/g, (m, p) ->\n                    switch p\n                        when \"y\" then date[\"get#{utc}FullYear\"]()\n                        when \"m\" then zeroPad(date[\"get#{utc}Month\"]()+1)\n                        when \"n\" then mthNames[date[\"get#{utc}Month\"]()]\n                        when \"d\" then zeroPad(date[\"get#{utc}Date\"]())\n                        when \"w\" then dayNames[date[\"get#{utc}Day\"]()]\n                        when \"x\" then date[\"get#{utc}Day\"]()\n                        when \"H\" then zeroPad(date[\"get#{utc}Hours\"]())\n                        when \"M\" then zeroPad(date[\"get#{utc}Minutes\"]())\n                        when \"S\" then zeroPad(date[\"get#{utc}Seconds\"]())\n                        else \"%\" + p\n\n    rx = /(\\d+)|(\\D+)/g\n    rd = /\\d/\n    rz = /^0/\n    naturalSort = (as, bs) =>\n        #nulls first\n        return -1 if bs? and not as?\n        return  1 if as? and not bs?\n\n        #then raw NaNs\n        return -1 if typeof as == \"number\" and isNaN(as)\n        return  1 if typeof bs == \"number\" and isNaN(bs)\n\n        #numbers and numbery strings group together\n        nas = +as\n        nbs = +bs\n        return -1 if nas < nbs\n        return  1 if nas > nbs\n\n        #within that, true numbers before numbery strings\n        return -1 if typeof as == \"number\" and typeof bs != \"number\"\n        return  1 if typeof bs == \"number\" and typeof as != \"number\"\n        return  0 if typeof as == \"number\" and typeof bs == \"number\"\n\n        # 'Infinity' is a textual number, so less than 'A'\n        return -1 if isNaN(nbs) and not isNaN(nas)\n        return  1 if isNaN(nas) and not isNaN(nbs)\n\n        #finally, \"smart\" string sorting per http://stackoverflow.com/a/4373421/112871\n        a = String(as)\n        b = String(bs)\n        return 0 if a == b\n        return (if a > b then 1 else -1) unless rd.test(a) and rd.test(b)\n\n        #special treatment for strings containing digits\n        a = a.match(rx) #create digits vs non-digit chunks and iterate through\n        b = b.match(rx)\n        while a.length and b.length\n            a1 = a.shift()\n            b1 = b.shift()\n            if a1 != b1\n                if rd.test(a1) and rd.test(b1) #both are digit chunks\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\n                else\n                    return (if a1 > b1 then 1 else -1)\n        return a.length - b.length\n\n    sortAs = (order) ->\n        mapping = {}\n        l_mapping = {} # sort lowercased keys similarly\n        for i, x of order\n            mapping[x] = i\n            l_mapping[x.toLowerCase()] = i if typeof x == \"string\"\n        (a, b) ->\n            if mapping[a]? and mapping[b]? then mapping[a] - mapping[b]\n            else if mapping[a]? then -1\n            else if mapping[b]? then 1\n            else if l_mapping[a]? and l_mapping[b]? then l_mapping[a] - l_mapping[b]\n            else if l_mapping[a]? then -1\n            else if l_mapping[b]? then 1\n            else naturalSort(a,b)\n\n    getSort = (sorters, attr) ->\n        if sorters?\n            if $.isFunction(sorters)\n                sort = sorters(attr)\n                return sort if $.isFunction(sort)\n            else if sorters[attr]?\n                return sorters[attr]\n        return naturalSort\n\n    ###\n    Data Model class\n    ###\n\n    class PivotData\n        constructor: (input, opts = {}) ->\n            @input = input\n            @aggregator = opts.aggregator ? aggregatorTemplates.count()()\n            @aggregatorName = opts.aggregatorName ? \"Count\"\n            @colAttrs = opts.cols ? []\n            @rowAttrs = opts.rows ? []\n            @valAttrs = opts.vals ? []\n            @sorters = opts.sorters ? {}\n            @rowOrder = opts.rowOrder ? \"key_a_to_z\"\n            @colOrder = opts.colOrder ? \"key_a_to_z\"\n            @derivedAttributes = opts.derivedAttributes ? {}\n            @filter = opts.filter ? (-> true)\n            @tree = {}\n            @rowKeys = []\n            @colKeys = []\n            @rowTotals = {}\n            @colTotals = {}\n            @allTotal = @aggregator(this, [], [])\n            @sorted = false\n\n            # iterate through input, accumulating data for cells\n            PivotData.forEachRecord @input, @derivedAttributes, (record) =>\n                @processRecord(record) if @filter(record)\n\n        #can handle arrays or jQuery selections of tables\n        @forEachRecord = (input, derivedAttributes, f) ->\n            if $.isEmptyObject derivedAttributes\n                addRecord = f\n            else\n                addRecord = (record) ->\n                    record[k] = v(record) ? record[k] for k, v of derivedAttributes\n                    f(record)\n\n            #if it's a function, have it call us back\n            if $.isFunction(input)\n                input(addRecord)\n            else if $.isArray(input)\n                if $.isArray(input[0]) #array of arrays\n                    for own i, compactRecord of input when i > 0\n                        record = {}\n                        record[k] = compactRecord[j] for own j, k of input[0]\n                        addRecord(record)\n                else #array of objects\n                    addRecord(record) for record in input\n            else if input instanceof jQuery\n                tblCols = []\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\n                $(\"tbody > tr\", input).each (i) ->\n                    record = {}\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).text()\n                    addRecord(record)\n            else\n                throw new Error(\"unknown input format\")\n\n        forEachMatchingRecord: (criteria, callback) ->\n            PivotData.forEachRecord @input, @derivedAttributes, (record) =>\n                return if not @filter(record)\n                for k, v of criteria\n                    return if v != (record[k] ? \"null\")\n                callback(record)\n\n        arrSort: (attrs) =>\n            sortersArr = (getSort(@sorters, a) for a in attrs)\n            (a,b) ->\n                for own i, sorter of sortersArr\n                    comparison = sorter(a[i], b[i])\n                    return comparison if comparison != 0\n                return 0\n\n        sortKeys: () =>\n            if not @sorted\n                @sorted = true\n                v = (r,c) => @getAggregator(r,c).value()\n                switch @rowOrder\n                    when \"value_a_to_z\"  then @rowKeys.sort (a,b) =>  naturalSort v(a,[]), v(b,[])\n                    when \"value_z_to_a\" then @rowKeys.sort (a,b) => -naturalSort v(a,[]), v(b,[])\n                    else             @rowKeys.sort @arrSort(@rowAttrs)\n                switch @colOrder\n                    when \"value_a_to_z\"  then @colKeys.sort (a,b) =>  naturalSort v([],a), v([],b)\n                    when \"value_z_to_a\" then @colKeys.sort (a,b) => -naturalSort v([],a), v([],b)\n                    else             @colKeys.sort @arrSort(@colAttrs)\n\n        getColKeys: () =>\n            @sortKeys()\n            return @colKeys\n\n        getRowKeys: () =>\n            @sortKeys()\n            return @rowKeys\n\n        processRecord: (record) -> #this code is called in a tight loop\n            colKey = []\n            rowKey = []\n            colKey.push record[x] ? \"null\" for x in @colAttrs\n            rowKey.push record[x] ? \"null\" for x in @rowAttrs\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n\n            @allTotal.push record\n\n            if rowKey.length != 0\n                if not @rowTotals[flatRowKey]\n                    @rowKeys.push rowKey\n                    @rowTotals[flatRowKey] = @aggregator(this, rowKey, [])\n                @rowTotals[flatRowKey].push record\n\n            if colKey.length != 0\n                if not @colTotals[flatColKey]\n                    @colKeys.push colKey\n                    @colTotals[flatColKey] = @aggregator(this, [], colKey)\n                @colTotals[flatColKey].push record\n\n            if colKey.length != 0 and rowKey.length != 0\n                if not @tree[flatRowKey]\n                    @tree[flatRowKey] = {}\n                if not @tree[flatRowKey][flatColKey]\n                    @tree[flatRowKey][flatColKey] = @aggregator(this, rowKey, colKey)\n                @tree[flatRowKey][flatColKey].push record\n\n        getAggregator: (rowKey, colKey) =>\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n            if rowKey.length == 0 and colKey.length == 0\n                agg = @allTotal\n            else if rowKey.length == 0\n                agg = @colTotals[flatColKey]\n            else if colKey.length == 0\n                agg = @rowTotals[flatRowKey]\n            else\n                agg = @tree[flatRowKey][flatColKey]\n            return agg ? {value: (-> null), format: -> \"\"}\n\n    #expose these to the outside world\n    $.pivotUtilities = { aggregatorTemplates, aggregators, renderers, derivers, locales,\n        naturalSort, numberFormat, sortAs, PivotData }\n\n    ###\n    Default Renderer for hierarchical table layout\n    ###\n\n    pivotTableRenderer = (pivotData, opts) ->\n\n        defaults =\n            table: clickCallback: null, mouseOverCallback: null, mouseOutCallback: null\n            localeStrings: totals: \"Totals\"\n\n        opts = $.extend(true, {}, defaults, opts)\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n        \n        if opts.table.mouseOverCallback\n            getMouseOverHandler = (value, rowValues, colValues, cellModal) ->\n                filters = {}\n                filters[attr] = colValues[i] for own i, attr of colAttrs when colValues[i]?\n                filters[attr] = rowValues[i] for own i, attr of rowAttrs when rowValues[i]?\n                return (e) -> opts.table.mouseOverCallback(e, value, filters, pivotData, cellModal)\n        \n            getMouseOutCallback = (value, rowValues, colValues, cellModal) ->\n                filters = {}\n                filters[attr] = colValues[i] for own i, attr of colAttrs when colValues[i]?\n                filters[attr] = rowValues[i] for own i, attr of rowAttrs when rowValues[i]?\n                if opts.table.mouseOutCallback?\n                  return (e) -> opts.table.mouseOutCallback(e, value, filters, pivotData, cellModal)\n                else\n                  return (e) -> e\n        \n        if opts.table.clickCallback\n            getClickHandler = (value, rowValues, colValues) ->\n                filters = {}\n                filters[attr] = colValues[i] for own i, attr of colAttrs when colValues[i]?\n                filters[attr] = rowValues[i] for own i, attr of rowAttrs when rowValues[i]?\n                return (e) -> opts.table.clickCallback(e, value, filters, pivotData)\n                \n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col-span in pivotTableRenderer\n        spanSize = (arr, i, j) ->\n            if i != 0\n                noDraw = true\n                for x in [0..j]\n                    if arr[i-1][x] != arr[i][x]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            len = 0\n            while i+len < arr.length\n                stop = false\n                for x in [0..j]\n                    stop = true if arr[i][x] != arr[i+len][x]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        thead = document.createElement(\"thead\")\n        for own j, c of colAttrs\n            tr = document.createElement(\"tr\")\n            if parseInt(j) == 0 and rowAttrs.length != 0\n                th = document.createElement(\"th\")\n                th.setAttribute(\"colspan\", rowAttrs.length)\n                th.setAttribute(\"rowspan\", colAttrs.length)\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            th.textContent = c\n            tr.appendChild th\n            for own i, colKey of colKeys\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    th.textContent = colKey[j]\n                    th.setAttribute(\"colspan\", x)\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 2)\n                    tr.appendChild th\n            if parseInt(j) == 0\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\n                tr.appendChild th\n            thead.appendChild tr\n\n        #then a row for row header headers\n        if rowAttrs.length !=0\n            tr = document.createElement(\"tr\")\n            for own i, r of rowAttrs\n                th = document.createElement(\"th\")\n                th.className = \"pvtAxisLabel\"\n                th.textContent = r\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            if colAttrs.length ==0\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n            tr.appendChild th\n            thead.appendChild tr\n        result.appendChild thead\n\n        #now the actual data rows, with their row headers and totals\n        tbody = document.createElement(\"tbody\")\n        for own i, rowKey of rowKeys\n            tr = document.createElement(\"tr\")\n            for own j, txt of rowKey\n                x = spanSize(rowKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    th.textContent = txt\n                    th.setAttribute(\"rowspan\", x)\n                    if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\n                        th.setAttribute(\"colspan\",2)\n                    tr.appendChild th\n            for own j, colKey of colKeys #this is the tight loop\n                aggregator = pivotData.getAggregator(rowKey, colKey)\n                val = aggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtVal row#{i} col#{j}\"\n                td.textContent = aggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, rowKey, colKey)\n                if getMouseOverHandler?\n                    cellModal = document.createElement(\"div\")\n                    cellModal.className = \"pvtHoverModal hidden\"\n                    td.appendChild cellModal\n                    td.onmouseover = getMouseOverHandler(val, rowKey, colKey, cellModal)\n                    td.onmouseout  = getMouseOutCallback(val, rowKey, colKey, cellModal)\n                tr.appendChild td\n\n            totalAggregator = pivotData.getAggregator(rowKey, [])\n            val = totalAggregator.value()\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal rowTotal\"\n            td.textContent = totalAggregator.format(val)\n            td.setAttribute(\"data-value\", val)\n            if getClickHandler?\n                td.onclick = getClickHandler(val, rowKey, [])\n            td.setAttribute(\"data-for\", \"row\"+i)\n            tr.appendChild td\n            tbody.appendChild tr\n\n        #finally, the row for col totals, and a grand total\n        tr = document.createElement(\"tr\")\n        th = document.createElement(\"th\")\n        th.className = \"pvtTotalLabel\"\n        th.innerHTML = opts.localeStrings.totals\n        th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\n        tr.appendChild th\n        for own j, colKey of colKeys\n            totalAggregator = pivotData.getAggregator([], colKey)\n            val = totalAggregator.value()\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal colTotal\"\n            td.textContent = totalAggregator.format(val)\n            td.setAttribute(\"data-value\", val)\n            if getClickHandler?\n                td.onclick = getClickHandler(val, [], colKey)\n            td.setAttribute(\"data-for\", \"col\"+j)\n            tr.appendChild td\n        totalAggregator = pivotData.getAggregator([], [])\n        val = totalAggregator.value()\n        td = document.createElement(\"td\")\n        td.className = \"pvtGrandTotal\"\n        td.textContent = totalAggregator.format(val)\n        td.setAttribute(\"data-value\", val)\n        if getClickHandler?\n            td.onclick = getClickHandler(val, [], [])\n        tr.appendChild td\n        tbody.appendChild tr\n        result.appendChild tbody\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n    ###\n    Pivot Table core: create PivotData object and call Renderer on it\n    ###\n\n    $.fn.pivot = (input, inputOpts, locale=\"en\") ->\n        locale = \"en\" if not locales[locale]?\n        defaults =\n            cols : [], rows: [], vals: []\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\n            dataClass: PivotData\n            filter: -> true\n            aggregator: aggregatorTemplates.count()()\n            aggregatorName: \"Count\"\n            sorters: {}\n            derivedAttributes: {}\n            renderer: pivotTableRenderer\n\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\n        localeDefaults =\n            rendererOptions: {localeStrings}\n            localeStrings: localeStrings\n\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\n\n        result = null\n        try\n            pivotData = new opts.dataClass(input, opts)\n            try\n                result = opts.renderer(pivotData, opts.rendererOptions)\n            catch e\n                console.error(e.stack) if console?\n                result = $(\"<span>\").html opts.localeStrings.renderError\n        catch e\n            console.error(e.stack) if console?\n            result = $(\"<span>\").html opts.localeStrings.computeError\n\n        x = this[0]\n        x.removeChild(x.lastChild) while x.hasChildNodes()\n        return @append result\n\n\n    ###\n    Pivot Table UI: calls Pivot Table core above with options set by user\n    ###\n\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\") ->\n        locale = \"en\" if not locales[locale]?\n        defaults =\n            derivedAttributes: {}\n            aggregators: locales[locale].aggregators\n            renderers: locales[locale].renderers\n            exporters: {}\n            hiddenAttributes: []\n            menuLimit: 500\n            cols: [], rows: [], vals: []\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\n            dataClass: PivotData\n            exclusions: {}\n            inclusions: {}\n            unusedAttrsVertical: 85\n            autoSortUnusedAttrs: false\n            onRefresh: null\n            filter: -> true\n            sorters: {}\n\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\n        localeDefaults =\n            rendererOptions: {localeStrings}\n            localeStrings: localeStrings\n            \n        existingOpts = @data \"pivotUIOptions\"\n\n        if not existingOpts? or overwrite\n            opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\n        else\n            opts = existingOpts\n\n        try\n            # do a first pass on the data to cache a materialized copy of any\n            # function-valued inputs and to compute dimension cardinalities\n            attrValues = {}\n            materializedInput = []\n            recordsProcessed = 0\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) ->\n                return unless opts.filter(record)\n                materializedInput.push(record)\n                for own attr of record\n                    if not attrValues[attr]?\n                        attrValues[attr] = {}\n                        if recordsProcessed > 0\n                            attrValues[attr][\"null\"] = recordsProcessed\n                for attr of attrValues\n                    value = record[attr] ? \"null\"\n                    attrValues[attr][value] ?= 0\n                    attrValues[attr][value]++\n                recordsProcessed++\n\n            #start building the output\n            uiTable = $(\"<table>\", \"class\": \"pvtUi\").attr(\"cellpadding\", 5)\n\n            #renderer control\n            rendererControl = $(\"<td>\")\n\n            renderer = $(\"<select>\")\n                .addClass('pvtRenderer')\n                .appendTo(rendererControl)\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.renderers\n                $(\"<option>\").val(x).html(x).appendTo(renderer)\n            \n            if !$.isEmptyObject opts.exporters \n                exporter = $(\"<select>\").addClass('pvtExporter')\n                                        .appendTo(rendererControl)\n                \n                ## exporter control\n                exportButton = $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.export)\n                    .addClass('pvtExporterButton')\n                    .appendTo(rendererControl)\n                    .bind \"click\", -> pivotTableExporter()\n                \n                for own x of opts.exporters\n                    $(\"<option>\").val(x).html(x).appendTo(exporter);\n              \n            #axis list, including the double-click menu\n            unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused')\n            shownAttributes = (a for a of attrValues when a not in opts.hiddenAttributes)\n\n            unusedAttrsVerticalAutoOverride = false\n            if opts.unusedAttrsVertical == \"auto\"\n                unusedAttrsVerticalAutoCutoff = 120 # legacy support\n            else\n                unusedAttrsVerticalAutoCutoff = parseInt opts.unusedAttrsVertical\n\n            if not isNaN(unusedAttrsVerticalAutoCutoff)\n                attrLength = 0\n                attrLength += a.length for a in shownAttributes\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff\n\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                unused.addClass('pvtVertList')\n            else\n                unused.addClass('pvtHorizList')\n\n            for own i, attr of shownAttributes\n                do (attr) ->\n                    values = (v for v of attrValues[attr])\n                    hasExcludedItem = false\n                    valueList = $(\"<div>\").addClass('pvtFilterBox').hide()\n\n                    valueList.append $(\"<h4>\").append(\n                        $(\"<span>\").text(attr),\n                        $(\"<span>\").addClass(\"count\").text(\"(#{values.length})\"),\n                        )\n                    if values.length > opts.menuLimit\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\n                    else\n                        if values.length > 5\n                            controls = $(\"<p>\").appendTo(valueList)\n                            sorter = getSort(opts.sorters, attr)\n                            placeholder = opts.localeStrings.filterResults\n                            $(\"<input>\", {type: \"text\"}).appendTo(controls)\n                                .attr({placeholder: placeholder, class: \"pvtSearch\"})\n                                .bind \"keyup\", ->\n                                    filter = $(this).val().toLowerCase().trim()\n                                    accept_gen = (prefix, accepted) -> (v) ->\n                                        real_filter = filter.substring(prefix.length).trim()\n                                        return true if real_filter.length == 0\n                                        return Math.sign(sorter(v.toLowerCase(), real_filter)) in accepted\n                                    accept =\n                                        if      filter.startsWith(\">=\") then accept_gen(\">=\", [1,0])\n                                        else if filter.startsWith(\"<=\") then accept_gen(\"<=\", [-1,0])\n                                        else if filter.startsWith(\">\")  then accept_gen(\">\",  [1])\n                                        else if filter.startsWith(\"<\")  then accept_gen(\"<\",  [-1])\n                                        else if filter.startsWith(\"~\")  then (v) ->\n                                                return true if filter.substring(1).trim().length == 0\n                                                v.toLowerCase().match(filter.substring(1))\n                                        else (v) -> v.toLowerCase().indexOf(filter) != -1\n\n                                    valueList.find('.pvtCheckContainer p label span.value').each ->\n                                        if accept($(this).text())\n                                            $(this).parent().parent().show()\n                                        else\n                                            $(this).parent().parent().hide()\n                            controls.append $(\"<br>\")\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectAll)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:not(:checked)\")\n                                        .prop(\"checked\", true).toggleClass(\"changed\")\n                                    return false\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectNone)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:checked\")\n                                        .prop(\"checked\", false).toggleClass(\"changed\")\n                                    return false\n\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\n\n                        for value in values.sort(getSort(opts.sorters, attr))\n                             valueCount = attrValues[attr][value]\n                             filterItem = $(\"<label>\")\n                             filterItemExcluded = false\n                             if opts.inclusions[attr]\n                                filterItemExcluded = (value not in opts.inclusions[attr])\n                             else if opts.exclusions[attr]\n                                filterItemExcluded = (value in opts.exclusions[attr])\n                             hasExcludedItem ||= filterItemExcluded\n                             $(\"<input>\")\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr,value])\n                                .appendTo(filterItem)\n                                .bind \"change\", -> $(this).toggleClass(\"changed\")\n                             filterItem.append $(\"<span>\").addClass(\"value\").text(value)\n                             filterItem.append $(\"<span>\").addClass(\"count\").text(\"(\"+valueCount+\")\")\n                             checkContainer.append $(\"<p>\").append(filterItem)\n\n                    closeFilterBox = ->\n                        if valueList.find(\"[type='checkbox']\").length >\n                               valueList.find(\"[type='checkbox']:checked\").length\n                                attrElem.addClass \"pvtFilteredAttribute\"\n                            else\n                                attrElem.removeClass \"pvtFilteredAttribute\"\n\n                            valueList.find('.pvtSearch').val('')\n                            valueList.find('.pvtCheckContainer p').show()\n                            valueList.hide()\n\n                    finalButtons = $(\"<p>\").appendTo(valueList)\n\n                    if values.length <= opts.menuLimit\n                        $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.apply)\n                            .appendTo(finalButtons).bind \"click\", ->\n                                if valueList.find(\".changed\").removeClass(\"changed\").length\n                                    refresh()\n                                closeFilterBox()\n\n                    $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.cancel)\n                        .appendTo(finalButtons).bind \"click\", ->\n                            valueList.find(\".changed:checked\")\n                                .removeClass(\"changed\").prop(\"checked\", false)\n                            valueList.find(\".changed:not(:checked)\")\n                                .removeClass(\"changed\").prop(\"checked\", true)\n                            closeFilterBox()\n\n                    triangleLink = $(\"<span>\").addClass('pvtTriangle')\n                        .html(\" &#x25BE;\").bind \"click\", (e) ->\n                            {left, top} = $(e.currentTarget).position()\n                            valueList.css(left: left+10, top: top+10).show()\n\n                    attrElem = $(\"<li>\").addClass(\"axis_#{i}\")\n                        .append $(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink)\n\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\n                    unused.append(attrElem).append(valueList)\n\n            tr1 = $(\"<tr>\").appendTo(uiTable)\n\n            #aggregator menu and value area\n\n            aggregator = $(\"<select>\").addClass('pvtAggregator')\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.aggregators\n                aggregator.append $(\"<option>\").val(x).html(x)\n\n            ordering =\n                key_a_to_z:   {rowSymbol: \"&varr;\", colSymbol: \"&harr;\", next: \"value_a_to_z\"}\n                value_a_to_z: {rowSymbol: \"&darr;\", colSymbol: \"&rarr;\", next: \"value_z_to_a\"}\n                value_z_to_a: {rowSymbol: \"&uarr;\", colSymbol: \"&larr;\", next: \"key_a_to_z\"}\n\n            rowOrderArrow = $(\"<a>\", role: \"button\").addClass(\"pvtRowOrder\")\n                .data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol)\n                .bind \"click\", ->\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\n                    $(this).html(ordering[$(this).data(\"order\")].rowSymbol)\n                    refresh()\n\n            colOrderArrow = $(\"<a>\", role: \"button\").addClass(\"pvtColOrder\")\n                .data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol)\n                .bind \"click\", ->\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\n                    $(this).html(ordering[$(this).data(\"order\")].colSymbol)\n                    refresh()\n\n            $(\"<td>\").addClass('pvtVals')\n              .appendTo(tr1)\n              .append(aggregator)\n              .append(rowOrderArrow)\n              .append(colOrderArrow)\n              .append($(\"<br>\"))\n\n            #column axes\n            $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1)\n\n            tr2 = $(\"<tr>\").appendTo(uiTable)\n\n            #row axes\n            tr2.append $(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\")\n\n            #the actual pivot table container\n            pivotTable = $(\"<td>\")\n                .attr(\"valign\", \"top\")\n                .addClass('pvtRendererArea')\n                .appendTo(tr2)\n\n            #finally the renderer dropdown and unused attribs are inserted at the requested location\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                uiTable.find('tr:nth-child(1)').prepend rendererControl\n                uiTable.find('tr:nth-child(2)').prepend unused\n            else\n                uiTable.prepend $(\"<tr>\").append(rendererControl).append(unused)\n\n            #render the UI in its default state\n            @html uiTable\n\n            #set up the UI initial state as requested by moving elements around\n\n            for x in opts.cols\n                @find(\".pvtCols\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\n            for x in opts.rows\n                @find(\".pvtRows\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\n            if opts.aggregatorName?\n                @find(\".pvtAggregator\").val opts.aggregatorName\n            if opts.rendererName?\n                @find(\".pvtRenderer\").val opts.rendererName\n\n            initialRender = true\n\n            #set up for refreshing\n            refreshDelayed = =>\n                subopts = getRenderOptions()\n                pivotTable.pivot(materializedInput,subopts)\n                pivotUIOptions = $.extend {}, opts,\n                    cols: subopts.cols\n                    rows: subopts.rows\n                    colOrder: subopts.colOrder\n                    rowOrder: subopts.rowOrder\n                    vals: subopts.vals\n                    exclusions: subopts.exclusions\n                    inclusions: subopts.inclusions\n                    inclusionsInfo: subopts.inclusions #duplicated for backwards-compatibility\n                    aggregatorName: subopts.aggregatorName\n                    rendererName: subopts.rendererName\n\n                @data \"pivotUIOptions\", pivotUIOptions\n\n                # if requested make sure unused columns are in alphabetical order\n                if opts.autoSortUnusedAttrs\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\n                    $(unusedAttrsContainer).children(\"li\")\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\n                        .appendTo unusedAttrsContainer\n\n                pivotTable.css(\"opacity\", 1)\n                opts.onRefresh(pivotUIOptions) if opts.onRefresh?\n\n            refresh = =>\n                pivotTable.css(\"opacity\", 0.5)\n                setTimeout refreshDelayed, 10\n            \n            getRenderOptions = =>\n                subopts =\n                    derivedAttributes: opts.derivedAttributes\n                    localeStrings: opts.localeStrings\n                    rendererOptions: opts.rendererOptions\n                    sorters: opts.sorters\n                    cols: [], rows: []\n                    dataClass: opts.dataClass\n\n                numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\n                vals = []\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\n                @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                    if numInputsToProcess == 0\n                        $(this).remove()\n                    else\n                        numInputsToProcess--\n                        vals.push $(this).val() if $(this).val() != \"\"\n\n                if numInputsToProcess != 0\n                    pvtVals = @find(\".pvtVals\")\n                    for x in [0...numInputsToProcess]\n                        newDropdown = $(\"<select>\")\n                            .addClass('pvtAttrDropdown')\n                            .append($(\"<option>\"))\n                            .bind \"change\", -> refresh()\n                        for attr in shownAttributes\n                            newDropdown.append($(\"<option>\").val(attr).text(attr))\n                        pvtVals.append(newDropdown)\n\n                if initialRender\n                    vals = opts.vals\n                    i = 0\n                    @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                        $(this).val vals[i]\n                        i++\n                    initialRender = false\n\n                subopts.aggregatorName = aggregator.val()\n                subopts.vals = vals\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals)\n                subopts.renderer = opts.renderers[renderer.val()]\n                subopts.rendererName = renderer.val()\n                subopts.rowOrder = rowOrderArrow.data(\"order\")\n                subopts.colOrder = colOrderArrow.data(\"order\")\n                #construct filter here\n                exclusions = {}\n                @find('input.pvtFilter').not(':checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        exclusions[filter[0]].push( filter[1] )\n                    else\n                        exclusions[filter[0]] = [ filter[1] ]\n                #include inclusions when exclusions present\n                inclusions = {}\n                @find('input.pvtFilter:checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        if inclusions[filter[0]]?\n                            inclusions[filter[0]].push( filter[1] )\n                        else\n                            inclusions[filter[0]] = [ filter[1] ]\n\n                subopts.filter = (record) ->\n                    return false if not opts.filter(record)\n                    for k,excludedItems of exclusions\n                        return false if \"\"+(record[k] ? 'null') in excludedItems\n                    return true\n                \n                return $.extend(true, subopts, { inclusions, exclusions })\n            \n            pivotTableExporter = =>\n                subopts = $.extend(true, getRenderOptions(), { exporter: opts.exporters[exporter.val()] });\n                try\n                    pivotData = new opts.dataClass(materializedInput, subopts)\n                    try\n                        subopts.exporter(pivotData, subopts.rendererOptions)\n                    catch e\n                        console.error(e.stack) if console?\n                  \n            #the very first refresh will actually display the table\n            refresh()\n\n            @find(\".pvtAxisContainer\").sortable\n                    update: (e, ui) -> refresh() if not ui.sender?\n                    connectWith: @find(\".pvtAxisContainer\")\n                    items: 'li'\n                    placeholder: 'pvtPlaceholder'\n        catch e\n            console.error(e.stack) if console?\n            @html opts.localeStrings.uiRenderError\n        return this\n\n    ###\n    Heatmap post-processing\n    ###\n\n    $.fn.heatmap = (scope = \"heatmap\", opts) ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        # given a series of values\n        # must return a function to map a given value to a CSS color\n        colorScaleGenerator = opts?.heatmap?.colorScaleGenerator\n        colorScaleGenerator ?= (values) ->\n            min = Math.min(values...)\n            max = Math.max(values...)\n            return (x) ->\n                nonRed = 255 - Math.round 255*(x-min)/(max-min)\n                return \"rgb(255,#{nonRed},#{nonRed})\"\n\n        heatmapper = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            colorScale = colorScaleGenerator(values)\n            forEachCell (x, elem) -> elem.css \"background-color\", colorScale(x)\n\n        switch scope\n            when \"heatmap\"    then heatmapper \".pvtVal\"\n            when \"rowheatmap\" then heatmapper \".pvtVal.row#{i}\" for i in [0...numRows]\n            when \"colheatmap\" then heatmapper \".pvtVal.col#{j}\" for j in [0...numCols]\n\n        heatmapper \".pvtTotal.rowTotal\"\n        heatmapper \".pvtTotal.colTotal\"\n\n        return this\n\n    ###\n    Barchart post-processing\n    ###\n\n    $.fn.barchart =  ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        barcharter = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            max = Math.max(values...)\n            scaler = (x) -> 100*x/(1.4*max)\n            forEachCell (x, elem) ->\n                text = elem.text()\n                wrapper = $(\"<div>\").css\n                    \"position\": \"relative\"\n                    \"height\": \"55px\"\n                wrapper.append $(\"<div>\").css\n                    \"position\": \"absolute\"\n                    \"bottom\": 0\n                    \"left\": 0\n                    \"right\": 0\n                    \"height\": scaler(x) + \"%\"\n                    \"background-color\": \"gray\"\n                wrapper.append $(\"<div>\").text(text).css\n                    \"position\":\"relative\"\n                    \"padding-left\":\"5px\"\n                    \"padding-right\":\"5px\"\n\n                elem.css(\"padding\": 0,\"padding-top\": \"5px\", \"text-align\": \"center\").html wrapper\n\n        barcharter \".pvtVal.row#{i}\" for i in [0...numRows]\n        barcharter \".pvtTotal.colTotal\"\n\n        return this\n","(function() {\n  var callWithJQuery,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n    slice = [].slice,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  callWithJQuery(function($) {\n\n    /*\n    Utilities\n     */\n    var PivotData, addSeparators, aggregatorTemplates, aggregators, dayNamesEn, derivers, getSort, locales, mthNamesEn, naturalSort, numberFormat, pivotTableRenderer, rd, renderers, rx, rz, sortAs, usFmt, usFmtInt, usFmtPct, zeroPad;\n    addSeparators = function(nStr, thousandsSep, decimalSep) {\n      var rgx, x, x1, x2;\n      nStr += '';\n      x = nStr.split('.');\n      x1 = x[0];\n      x2 = x.length > 1 ? decimalSep + x[1] : '';\n      rgx = /(\\d+)(\\d{3})/;\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2');\n      }\n      return x1 + x2;\n    };\n    numberFormat = function(opts) {\n      var defaults;\n      defaults = {\n        digitsAfterDecimal: 2,\n        scaler: 1,\n        thousandsSep: \",\",\n        decimalSep: \".\",\n        prefix: \"\",\n        suffix: \"\",\n        showZero: false\n      };\n      opts = $.extend({}, defaults, opts);\n      return function(x) {\n        var result;\n        if (isNaN(x) || !isFinite(x)) {\n          return \"\";\n        }\n        if (x === 0 && !opts.showZero) {\n          return \"\";\n        }\n        result = addSeparators((opts.scaler * x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep);\n        return \"\" + opts.prefix + result + opts.suffix;\n      };\n    };\n    usFmt = numberFormat();\n    usFmtInt = numberFormat({\n      digitsAfterDecimal: 0\n    });\n    usFmtPct = numberFormat({\n      digitsAfterDecimal: 1,\n      scaler: 100,\n      suffix: \"%\"\n    });\n    aggregatorTemplates = {\n      count: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function() {\n          return function(data, rowKey, colKey) {\n            return {\n              count: 0,\n              push: function() {\n                return this.count++;\n              },\n              value: function() {\n                return this.count;\n              },\n              format: formatter\n            };\n          };\n        };\n      },\n      countUnique: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return this.uniq.length;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      listUnique: function(sep) {\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return this.uniq.join(sep);\n              },\n              format: function(x) {\n                return x;\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  return this.sum += parseFloat(record[attr]);\n                }\n              },\n              value: function() {\n                return this.sum;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      min: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              push: function(record) {\n                var ref, x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.val = Math.min(x, (ref = this.val) != null ? ref : x);\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      max: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              push: function(record) {\n                var ref, x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.val = Math.max(x, (ref = this.val) != null ? ref : x);\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      first: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              sorter: getSort(data != null ? data.sorters : void 0, attr),\n              push: function(record) {\n                var ref, x;\n                x = record[attr];\n                if (this.sorter(x, (ref = this.val) != null ? ref : x) <= 0) {\n                  return this.val = x;\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: function(x) {\n                if (isNaN(x)) {\n                  return x;\n                } else {\n                  return formatter(x);\n                }\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      last: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              sorter: getSort(data != null ? data.sorters : void 0, attr),\n              push: function(record) {\n                var ref, x;\n                x = record[attr];\n                if (this.sorter(x, (ref = this.val) != null ? ref : x) >= 0) {\n                  return this.val = x;\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: function(x) {\n                if (isNaN(x)) {\n                  return x;\n                } else {\n                  return formatter(x);\n                }\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      average: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              len: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  this.sum += parseFloat(record[attr]);\n                  return this.len++;\n                }\n              },\n              value: function() {\n                return this.sum / this.len;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sumOverSum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                return this.sumNum / this.sumDenom;\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      sumOverSumBound80: function(upper, formatter) {\n        if (upper == null) {\n          upper = true;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                var sign;\n                sign = upper ? 1 : -1;\n                return (0.821187207574908 / this.sumDenom + this.sumNum / this.sumDenom + 1.2815515655446004 * sign * Math.sqrt(0.410593603787454 / (this.sumDenom * this.sumDenom) + (this.sumNum * (1 - this.sumNum / this.sumDenom)) / (this.sumDenom * this.sumDenom))) / (1 + 1.642374415149816 / this.sumDenom);\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      fractionOf: function(wrapped, type, formatter) {\n        if (type == null) {\n          type = \"total\";\n        }\n        if (formatter == null) {\n          formatter = usFmtPct;\n        }\n        return function() {\n          var x;\n          x = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return function(data, rowKey, colKey) {\n            return {\n              selector: {\n                total: [[], []],\n                row: [rowKey, []],\n                col: [[], colKey]\n              }[type],\n              inner: wrapped.apply(null, x)(data, rowKey, colKey),\n              push: function(record) {\n                return this.inner.push(record);\n              },\n              format: formatter,\n              value: function() {\n                return this.inner.value() / data.getAggregator.apply(data, this.selector).inner.value();\n              },\n              numInputs: wrapped.apply(null, x)().numInputs\n            };\n          };\n        };\n      }\n    };\n    aggregators = (function(tpl) {\n      return {\n        \"Count\": tpl.count(usFmtInt),\n        \"Count Unique Values\": tpl.countUnique(usFmtInt),\n        \"List Unique Values\": tpl.listUnique(\", \"),\n        \"Sum\": tpl.sum(usFmt),\n        \"Integer Sum\": tpl.sum(usFmtInt),\n        \"Average\": tpl.average(usFmt),\n        \"Minimum\": tpl.min(usFmt),\n        \"Maximum\": tpl.max(usFmt),\n        \"First\": tpl.first(usFmt),\n        \"Last\": tpl.last(usFmt),\n        \"Sum over Sum\": tpl.sumOverSum(usFmt),\n        \"80% Upper Bound\": tpl.sumOverSumBound80(true, usFmt),\n        \"80% Lower Bound\": tpl.sumOverSumBound80(false, usFmt),\n        \"Sum as Fraction of Total\": tpl.fractionOf(tpl.sum(), \"total\", usFmtPct),\n        \"Sum as Fraction of Rows\": tpl.fractionOf(tpl.sum(), \"row\", usFmtPct),\n        \"Sum as Fraction of Columns\": tpl.fractionOf(tpl.sum(), \"col\", usFmtPct),\n        \"Count as Fraction of Total\": tpl.fractionOf(tpl.count(), \"total\", usFmtPct),\n        \"Count as Fraction of Rows\": tpl.fractionOf(tpl.count(), \"row\", usFmtPct),\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\", usFmtPct)\n      };\n    })(aggregatorTemplates);\n    renderers = {\n      \"Table\": function(data, opts) {\n        return pivotTableRenderer(data, opts);\n      },\n      \"Table Barchart\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).barchart();\n      },\n      \"Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\", opts);\n      },\n      \"Row Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts);\n      },\n      \"Col Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts);\n      }\n    };\n    locales = {\n      en: {\n        aggregators: aggregators,\n        renderers: renderers,\n        localeStrings: {\n          renderError: \"An error occurred rendering the PivotTable results.\",\n          computeError: \"An error occurred computing the PivotTable results.\",\n          uiRenderError: \"An error occurred rendering the PivotTable UI.\",\n          selectAll: \"Select All\",\n          selectNone: \"Select None\",\n          tooMany: \"(too many to list)\",\n          filterResults: \"Filter values\",\n          \"export\": 'Export',\n          apply: \"Apply\",\n          cancel: \"Cancel\",\n          totals: \"Totals\",\n          vs: \"vs\",\n          by: \"by\"\n        }\n      }\n    };\n    mthNamesEn = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    dayNamesEn = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    zeroPad = function(number) {\n      return (\"0\" + number).substr(-2, 2);\n    };\n    derivers = {\n      bin: function(col, binWidth) {\n        return function(record) {\n          return record[col] - record[col] % binWidth;\n        };\n      },\n      dateFormat: function(col, formatString, utcOutput, mthNames, dayNames) {\n        var utc;\n        if (utcOutput == null) {\n          utcOutput = false;\n        }\n        if (mthNames == null) {\n          mthNames = mthNamesEn;\n        }\n        if (dayNames == null) {\n          dayNames = dayNamesEn;\n        }\n        utc = utcOutput ? \"UTC\" : \"\";\n        return function(record) {\n          var date;\n          date = new Date(Date.parse(record[col]));\n          if (isNaN(date)) {\n            return \"\";\n          }\n          return formatString.replace(/%(.)/g, function(m, p) {\n            switch (p) {\n              case \"y\":\n                return date[\"get\" + utc + \"FullYear\"]();\n              case \"m\":\n                return zeroPad(date[\"get\" + utc + \"Month\"]() + 1);\n              case \"n\":\n                return mthNames[date[\"get\" + utc + \"Month\"]()];\n              case \"d\":\n                return zeroPad(date[\"get\" + utc + \"Date\"]());\n              case \"w\":\n                return dayNames[date[\"get\" + utc + \"Day\"]()];\n              case \"x\":\n                return date[\"get\" + utc + \"Day\"]();\n              case \"H\":\n                return zeroPad(date[\"get\" + utc + \"Hours\"]());\n              case \"M\":\n                return zeroPad(date[\"get\" + utc + \"Minutes\"]());\n              case \"S\":\n                return zeroPad(date[\"get\" + utc + \"Seconds\"]());\n              default:\n                return \"%\" + p;\n            }\n          });\n        };\n      }\n    };\n    rx = /(\\d+)|(\\D+)/g;\n    rd = /\\d/;\n    rz = /^0/;\n    naturalSort = (function(_this) {\n      return function(as, bs) {\n        var a, a1, b, b1, nas, nbs;\n        if ((bs != null) && (as == null)) {\n          return -1;\n        }\n        if ((as != null) && (bs == null)) {\n          return 1;\n        }\n        if (typeof as === \"number\" && isNaN(as)) {\n          return -1;\n        }\n        if (typeof bs === \"number\" && isNaN(bs)) {\n          return 1;\n        }\n        nas = +as;\n        nbs = +bs;\n        if (nas < nbs) {\n          return -1;\n        }\n        if (nas > nbs) {\n          return 1;\n        }\n        if (typeof as === \"number\" && typeof bs !== \"number\") {\n          return -1;\n        }\n        if (typeof bs === \"number\" && typeof as !== \"number\") {\n          return 1;\n        }\n        if (typeof as === \"number\" && typeof bs === \"number\") {\n          return 0;\n        }\n        if (isNaN(nbs) && !isNaN(nas)) {\n          return -1;\n        }\n        if (isNaN(nas) && !isNaN(nbs)) {\n          return 1;\n        }\n        a = String(as);\n        b = String(bs);\n        if (a === b) {\n          return 0;\n        }\n        if (!(rd.test(a) && rd.test(b))) {\n          return (a > b ? 1 : -1);\n        }\n        a = a.match(rx);\n        b = b.match(rx);\n        while (a.length && b.length) {\n          a1 = a.shift();\n          b1 = b.shift();\n          if (a1 !== b1) {\n            if (rd.test(a1) && rd.test(b1)) {\n              return a1.replace(rz, \".0\") - b1.replace(rz, \".0\");\n            } else {\n              return (a1 > b1 ? 1 : -1);\n            }\n          }\n        }\n        return a.length - b.length;\n      };\n    })(this);\n    sortAs = function(order) {\n      var i, l_mapping, mapping, x;\n      mapping = {};\n      l_mapping = {};\n      for (i in order) {\n        x = order[i];\n        mapping[x] = i;\n        if (typeof x === \"string\") {\n          l_mapping[x.toLowerCase()] = i;\n        }\n      }\n      return function(a, b) {\n        if ((mapping[a] != null) && (mapping[b] != null)) {\n          return mapping[a] - mapping[b];\n        } else if (mapping[a] != null) {\n          return -1;\n        } else if (mapping[b] != null) {\n          return 1;\n        } else if ((l_mapping[a] != null) && (l_mapping[b] != null)) {\n          return l_mapping[a] - l_mapping[b];\n        } else if (l_mapping[a] != null) {\n          return -1;\n        } else if (l_mapping[b] != null) {\n          return 1;\n        } else {\n          return naturalSort(a, b);\n        }\n      };\n    };\n    getSort = function(sorters, attr) {\n      var sort;\n      if (sorters != null) {\n        if ($.isFunction(sorters)) {\n          sort = sorters(attr);\n          if ($.isFunction(sort)) {\n            return sort;\n          }\n        } else if (sorters[attr] != null) {\n          return sorters[attr];\n        }\n      }\n      return naturalSort;\n    };\n\n    /*\n    Data Model class\n     */\n    PivotData = (function() {\n      function PivotData(input, opts) {\n        var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;\n        if (opts == null) {\n          opts = {};\n        }\n        this.getAggregator = bind(this.getAggregator, this);\n        this.getRowKeys = bind(this.getRowKeys, this);\n        this.getColKeys = bind(this.getColKeys, this);\n        this.sortKeys = bind(this.sortKeys, this);\n        this.arrSort = bind(this.arrSort, this);\n        this.input = input;\n        this.aggregator = (ref = opts.aggregator) != null ? ref : aggregatorTemplates.count()();\n        this.aggregatorName = (ref1 = opts.aggregatorName) != null ? ref1 : \"Count\";\n        this.colAttrs = (ref2 = opts.cols) != null ? ref2 : [];\n        this.rowAttrs = (ref3 = opts.rows) != null ? ref3 : [];\n        this.valAttrs = (ref4 = opts.vals) != null ? ref4 : [];\n        this.sorters = (ref5 = opts.sorters) != null ? ref5 : {};\n        this.rowOrder = (ref6 = opts.rowOrder) != null ? ref6 : \"key_a_to_z\";\n        this.colOrder = (ref7 = opts.colOrder) != null ? ref7 : \"key_a_to_z\";\n        this.derivedAttributes = (ref8 = opts.derivedAttributes) != null ? ref8 : {};\n        this.filter = (ref9 = opts.filter) != null ? ref9 : (function() {\n          return true;\n        });\n        this.tree = {};\n        this.rowKeys = [];\n        this.colKeys = [];\n        this.rowTotals = {};\n        this.colTotals = {};\n        this.allTotal = this.aggregator(this, [], []);\n        this.sorted = false;\n        PivotData.forEachRecord(this.input, this.derivedAttributes, (function(_this) {\n          return function(record) {\n            if (_this.filter(record)) {\n              return _this.processRecord(record);\n            }\n          };\n        })(this));\n      }\n\n      PivotData.forEachRecord = function(input, derivedAttributes, f) {\n        var addRecord, compactRecord, i, j, k, l, len1, record, ref, results, results1, tblCols;\n        if ($.isEmptyObject(derivedAttributes)) {\n          addRecord = f;\n        } else {\n          addRecord = function(record) {\n            var k, ref, v;\n            for (k in derivedAttributes) {\n              v = derivedAttributes[k];\n              record[k] = (ref = v(record)) != null ? ref : record[k];\n            }\n            return f(record);\n          };\n        }\n        if ($.isFunction(input)) {\n          return input(addRecord);\n        } else if ($.isArray(input)) {\n          if ($.isArray(input[0])) {\n            results = [];\n            for (i in input) {\n              if (!hasProp.call(input, i)) continue;\n              compactRecord = input[i];\n              if (!(i > 0)) {\n                continue;\n              }\n              record = {};\n              ref = input[0];\n              for (j in ref) {\n                if (!hasProp.call(ref, j)) continue;\n                k = ref[j];\n                record[k] = compactRecord[j];\n              }\n              results.push(addRecord(record));\n            }\n            return results;\n          } else {\n            results1 = [];\n            for (l = 0, len1 = input.length; l < len1; l++) {\n              record = input[l];\n              results1.push(addRecord(record));\n            }\n            return results1;\n          }\n        } else if (input instanceof jQuery) {\n          tblCols = [];\n          $(\"thead > tr > th\", input).each(function(i) {\n            return tblCols.push($(this).text());\n          });\n          return $(\"tbody > tr\", input).each(function(i) {\n            record = {};\n            $(\"td\", this).each(function(j) {\n              return record[tblCols[j]] = $(this).text();\n            });\n            return addRecord(record);\n          });\n        } else {\n          throw new Error(\"unknown input format\");\n        }\n      };\n\n      PivotData.prototype.forEachMatchingRecord = function(criteria, callback) {\n        return PivotData.forEachRecord(this.input, this.derivedAttributes, (function(_this) {\n          return function(record) {\n            var k, ref, v;\n            if (!_this.filter(record)) {\n              return;\n            }\n            for (k in criteria) {\n              v = criteria[k];\n              if (v !== ((ref = record[k]) != null ? ref : \"null\")) {\n                return;\n              }\n            }\n            return callback(record);\n          };\n        })(this));\n      };\n\n      PivotData.prototype.arrSort = function(attrs) {\n        var a, sortersArr;\n        sortersArr = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = attrs.length; l < len1; l++) {\n            a = attrs[l];\n            results.push(getSort(this.sorters, a));\n          }\n          return results;\n        }).call(this);\n        return function(a, b) {\n          var comparison, i, sorter;\n          for (i in sortersArr) {\n            if (!hasProp.call(sortersArr, i)) continue;\n            sorter = sortersArr[i];\n            comparison = sorter(a[i], b[i]);\n            if (comparison !== 0) {\n              return comparison;\n            }\n          }\n          return 0;\n        };\n      };\n\n      PivotData.prototype.sortKeys = function() {\n        var v;\n        if (!this.sorted) {\n          this.sorted = true;\n          v = (function(_this) {\n            return function(r, c) {\n              return _this.getAggregator(r, c).value();\n            };\n          })(this);\n          switch (this.rowOrder) {\n            case \"value_a_to_z\":\n              this.rowKeys.sort((function(_this) {\n                return function(a, b) {\n                  return naturalSort(v(a, []), v(b, []));\n                };\n              })(this));\n              break;\n            case \"value_z_to_a\":\n              this.rowKeys.sort((function(_this) {\n                return function(a, b) {\n                  return -naturalSort(v(a, []), v(b, []));\n                };\n              })(this));\n              break;\n            default:\n              this.rowKeys.sort(this.arrSort(this.rowAttrs));\n          }\n          switch (this.colOrder) {\n            case \"value_a_to_z\":\n              return this.colKeys.sort((function(_this) {\n                return function(a, b) {\n                  return naturalSort(v([], a), v([], b));\n                };\n              })(this));\n            case \"value_z_to_a\":\n              return this.colKeys.sort((function(_this) {\n                return function(a, b) {\n                  return -naturalSort(v([], a), v([], b));\n                };\n              })(this));\n            default:\n              return this.colKeys.sort(this.arrSort(this.colAttrs));\n          }\n        }\n      };\n\n      PivotData.prototype.getColKeys = function() {\n        this.sortKeys();\n        return this.colKeys;\n      };\n\n      PivotData.prototype.getRowKeys = function() {\n        this.sortKeys();\n        return this.rowKeys;\n      };\n\n      PivotData.prototype.processRecord = function(record) {\n        var colKey, flatColKey, flatRowKey, l, len1, len2, n, ref, ref1, ref2, ref3, rowKey, x;\n        colKey = [];\n        rowKey = [];\n        ref = this.colAttrs;\n        for (l = 0, len1 = ref.length; l < len1; l++) {\n          x = ref[l];\n          colKey.push((ref1 = record[x]) != null ? ref1 : \"null\");\n        }\n        ref2 = this.rowAttrs;\n        for (n = 0, len2 = ref2.length; n < len2; n++) {\n          x = ref2[n];\n          rowKey.push((ref3 = record[x]) != null ? ref3 : \"null\");\n        }\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        this.allTotal.push(record);\n        if (rowKey.length !== 0) {\n          if (!this.rowTotals[flatRowKey]) {\n            this.rowKeys.push(rowKey);\n            this.rowTotals[flatRowKey] = this.aggregator(this, rowKey, []);\n          }\n          this.rowTotals[flatRowKey].push(record);\n        }\n        if (colKey.length !== 0) {\n          if (!this.colTotals[flatColKey]) {\n            this.colKeys.push(colKey);\n            this.colTotals[flatColKey] = this.aggregator(this, [], colKey);\n          }\n          this.colTotals[flatColKey].push(record);\n        }\n        if (colKey.length !== 0 && rowKey.length !== 0) {\n          if (!this.tree[flatRowKey]) {\n            this.tree[flatRowKey] = {};\n          }\n          if (!this.tree[flatRowKey][flatColKey]) {\n            this.tree[flatRowKey][flatColKey] = this.aggregator(this, rowKey, colKey);\n          }\n          return this.tree[flatRowKey][flatColKey].push(record);\n        }\n      };\n\n      PivotData.prototype.getAggregator = function(rowKey, colKey) {\n        var agg, flatColKey, flatRowKey;\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        if (rowKey.length === 0 && colKey.length === 0) {\n          agg = this.allTotal;\n        } else if (rowKey.length === 0) {\n          agg = this.colTotals[flatColKey];\n        } else if (colKey.length === 0) {\n          agg = this.rowTotals[flatRowKey];\n        } else {\n          agg = this.tree[flatRowKey][flatColKey];\n        }\n        return agg != null ? agg : {\n          value: (function() {\n            return null;\n          }),\n          format: function() {\n            return \"\";\n          }\n        };\n      };\n\n      return PivotData;\n\n    })();\n    $.pivotUtilities = {\n      aggregatorTemplates: aggregatorTemplates,\n      aggregators: aggregators,\n      renderers: renderers,\n      derivers: derivers,\n      locales: locales,\n      naturalSort: naturalSort,\n      numberFormat: numberFormat,\n      sortAs: sortAs,\n      PivotData: PivotData\n    };\n\n    /*\n    Default Renderer for hierarchical table layout\n     */\n    pivotTableRenderer = function(pivotData, opts) {\n      var aggregator, c, cellModal, colAttrs, colKey, colKeys, defaults, getClickHandler, getMouseOutCallback, getMouseOverHandler, i, j, r, result, rowAttrs, rowKey, rowKeys, spanSize, tbody, td, th, thead, totalAggregator, tr, txt, val, x;\n      defaults = {\n        table: {\n          clickCallback: null,\n          mouseOverCallback: null,\n          mouseOutCallback: null\n        },\n        localeStrings: {\n          totals: \"Totals\"\n        }\n      };\n      opts = $.extend(true, {}, defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys();\n      colKeys = pivotData.getColKeys();\n      if (opts.table.mouseOverCallback) {\n        getMouseOverHandler = function(value, rowValues, colValues, cellModal) {\n          var attr, filters, i;\n          filters = {};\n          for (i in colAttrs) {\n            if (!hasProp.call(colAttrs, i)) continue;\n            attr = colAttrs[i];\n            if (colValues[i] != null) {\n              filters[attr] = colValues[i];\n            }\n          }\n          for (i in rowAttrs) {\n            if (!hasProp.call(rowAttrs, i)) continue;\n            attr = rowAttrs[i];\n            if (rowValues[i] != null) {\n              filters[attr] = rowValues[i];\n            }\n          }\n          return function(e) {\n            return opts.table.mouseOverCallback(e, value, filters, pivotData, cellModal);\n          };\n        };\n        getMouseOutCallback = function(value, rowValues, colValues, cellModal) {\n          var attr, filters, i;\n          filters = {};\n          for (i in colAttrs) {\n            if (!hasProp.call(colAttrs, i)) continue;\n            attr = colAttrs[i];\n            if (colValues[i] != null) {\n              filters[attr] = colValues[i];\n            }\n          }\n          for (i in rowAttrs) {\n            if (!hasProp.call(rowAttrs, i)) continue;\n            attr = rowAttrs[i];\n            if (rowValues[i] != null) {\n              filters[attr] = rowValues[i];\n            }\n          }\n          if (opts.table.mouseOutCallback != null) {\n            return function(e) {\n              return opts.table.mouseOutCallback(e, value, filters, pivotData, cellModal);\n            };\n          } else {\n            return function(e) {\n              return e;\n            };\n          }\n        };\n      }\n      if (opts.table.clickCallback) {\n        getClickHandler = function(value, rowValues, colValues) {\n          var attr, filters, i;\n          filters = {};\n          for (i in colAttrs) {\n            if (!hasProp.call(colAttrs, i)) continue;\n            attr = colAttrs[i];\n            if (colValues[i] != null) {\n              filters[attr] = colValues[i];\n            }\n          }\n          for (i in rowAttrs) {\n            if (!hasProp.call(rowAttrs, i)) continue;\n            attr = rowAttrs[i];\n            if (rowValues[i] != null) {\n              filters[attr] = rowValues[i];\n            }\n          }\n          return function(e) {\n            return opts.table.clickCallback(e, value, filters, pivotData);\n          };\n        };\n      }\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      spanSize = function(arr, i, j) {\n        var l, len, n, noDraw, ref, ref1, stop, x;\n        if (i !== 0) {\n          noDraw = true;\n          for (x = l = 0, ref = j; 0 <= ref ? l <= ref : l >= ref; x = 0 <= ref ? ++l : --l) {\n            if (arr[i - 1][x] !== arr[i][x]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (i + len < arr.length) {\n          stop = false;\n          for (x = n = 0, ref1 = j; 0 <= ref1 ? n <= ref1 : n >= ref1; x = 0 <= ref1 ? ++n : --n) {\n            if (arr[i][x] !== arr[i + len][x]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      thead = document.createElement(\"thead\");\n      for (j in colAttrs) {\n        if (!hasProp.call(colAttrs, j)) continue;\n        c = colAttrs[j];\n        tr = document.createElement(\"tr\");\n        if (parseInt(j) === 0 && rowAttrs.length !== 0) {\n          th = document.createElement(\"th\");\n          th.setAttribute(\"colspan\", rowAttrs.length);\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        th.textContent = c;\n        tr.appendChild(th);\n        for (i in colKeys) {\n          if (!hasProp.call(colKeys, i)) continue;\n          colKey = colKeys[i];\n          x = spanSize(colKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            th.textContent = colKey[j];\n            th.setAttribute(\"colspan\", x);\n            if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(j) === 0) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"rowspan\", colAttrs.length + (rowAttrs.length === 0 ? 0 : 1));\n          tr.appendChild(th);\n        }\n        thead.appendChild(tr);\n      }\n      if (rowAttrs.length !== 0) {\n        tr = document.createElement(\"tr\");\n        for (i in rowAttrs) {\n          if (!hasProp.call(rowAttrs, i)) continue;\n          r = rowAttrs[i];\n          th = document.createElement(\"th\");\n          th.className = \"pvtAxisLabel\";\n          th.textContent = r;\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        if (colAttrs.length === 0) {\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n        }\n        tr.appendChild(th);\n        thead.appendChild(tr);\n      }\n      result.appendChild(thead);\n      tbody = document.createElement(\"tbody\");\n      for (i in rowKeys) {\n        if (!hasProp.call(rowKeys, i)) continue;\n        rowKey = rowKeys[i];\n        tr = document.createElement(\"tr\");\n        for (j in rowKey) {\n          if (!hasProp.call(rowKey, j)) continue;\n          txt = rowKey[j];\n          x = spanSize(rowKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtRowLabel\";\n            th.textContent = txt;\n            th.setAttribute(\"rowspan\", x);\n            if (parseInt(j) === rowAttrs.length - 1 && colAttrs.length !== 0) {\n              th.setAttribute(\"colspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          aggregator = pivotData.getAggregator(rowKey, colKey);\n          val = aggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtVal row\" + i + \" col\" + j;\n          td.textContent = aggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, rowKey, colKey);\n          }\n          if (getMouseOverHandler != null) {\n            cellModal = document.createElement(\"div\");\n            cellModal.className = \"pvtHoverModal hidden\";\n            td.appendChild(cellModal);\n            td.onmouseover = getMouseOverHandler(val, rowKey, colKey, cellModal);\n            td.onmouseout = getMouseOutCallback(val, rowKey, colKey, cellModal);\n          }\n          tr.appendChild(td);\n        }\n        totalAggregator = pivotData.getAggregator(rowKey, []);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal rowTotal\";\n        td.textContent = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        if (getClickHandler != null) {\n          td.onclick = getClickHandler(val, rowKey, []);\n        }\n        td.setAttribute(\"data-for\", \"row\" + i);\n        tr.appendChild(td);\n        tbody.appendChild(tr);\n      }\n      tr = document.createElement(\"tr\");\n      th = document.createElement(\"th\");\n      th.className = \"pvtTotalLabel\";\n      th.innerHTML = opts.localeStrings.totals;\n      th.setAttribute(\"colspan\", rowAttrs.length + (colAttrs.length === 0 ? 0 : 1));\n      tr.appendChild(th);\n      for (j in colKeys) {\n        if (!hasProp.call(colKeys, j)) continue;\n        colKey = colKeys[j];\n        totalAggregator = pivotData.getAggregator([], colKey);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal colTotal\";\n        td.textContent = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        if (getClickHandler != null) {\n          td.onclick = getClickHandler(val, [], colKey);\n        }\n        td.setAttribute(\"data-for\", \"col\" + j);\n        tr.appendChild(td);\n      }\n      totalAggregator = pivotData.getAggregator([], []);\n      val = totalAggregator.value();\n      td = document.createElement(\"td\");\n      td.className = \"pvtGrandTotal\";\n      td.textContent = totalAggregator.format(val);\n      td.setAttribute(\"data-value\", val);\n      if (getClickHandler != null) {\n        td.onclick = getClickHandler(val, [], []);\n      }\n      tr.appendChild(td);\n      tbody.appendChild(tr);\n      result.appendChild(tbody);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n\n    /*\n    Pivot Table core: create PivotData object and call Renderer on it\n     */\n    $.fn.pivot = function(input, inputOpts, locale) {\n      var defaults, e, localeDefaults, localeStrings, opts, pivotData, result, x;\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        cols: [],\n        rows: [],\n        vals: [],\n        rowOrder: \"key_a_to_z\",\n        colOrder: \"key_a_to_z\",\n        dataClass: PivotData,\n        filter: function() {\n          return true;\n        },\n        aggregator: aggregatorTemplates.count()(),\n        aggregatorName: \"Count\",\n        sorters: {},\n        derivedAttributes: {},\n        renderer: pivotTableRenderer\n      };\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      result = null;\n      try {\n        pivotData = new opts.dataClass(input, opts);\n        try {\n          result = opts.renderer(pivotData, opts.rendererOptions);\n        } catch (error) {\n          e = error;\n          if (typeof console !== \"undefined\" && console !== null) {\n            console.error(e.stack);\n          }\n          result = $(\"<span>\").html(opts.localeStrings.renderError);\n        }\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        result = $(\"<span>\").html(opts.localeStrings.computeError);\n      }\n      x = this[0];\n      while (x.hasChildNodes()) {\n        x.removeChild(x.lastChild);\n      }\n      return this.append(result);\n    };\n\n    /*\n    Pivot Table UI: calls Pivot Table core above with options set by user\n     */\n    $.fn.pivotUI = function(input, inputOpts, overwrite, locale) {\n      var a, aggregator, attr, attrLength, attrValues, colOrderArrow, defaults, e, existingOpts, exportButton, exporter, fn, getRenderOptions, i, initialRender, l, len1, len2, len3, localeDefaults, localeStrings, materializedInput, n, o, opts, ordering, pivotTable, pivotTableExporter, recordsProcessed, ref, ref1, ref2, ref3, ref4, refresh, refreshDelayed, renderer, rendererControl, rowOrderArrow, shownAttributes, tr1, tr2, uiTable, unused, unusedAttrsVerticalAutoCutoff, unusedAttrsVerticalAutoOverride, x;\n      if (overwrite == null) {\n        overwrite = false;\n      }\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        derivedAttributes: {},\n        aggregators: locales[locale].aggregators,\n        renderers: locales[locale].renderers,\n        exporters: {},\n        hiddenAttributes: [],\n        menuLimit: 500,\n        cols: [],\n        rows: [],\n        vals: [],\n        rowOrder: \"key_a_to_z\",\n        colOrder: \"key_a_to_z\",\n        dataClass: PivotData,\n        exclusions: {},\n        inclusions: {},\n        unusedAttrsVertical: 85,\n        autoSortUnusedAttrs: false,\n        onRefresh: null,\n        filter: function() {\n          return true;\n        },\n        sorters: {}\n      };\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      existingOpts = this.data(\"pivotUIOptions\");\n      if ((existingOpts == null) || overwrite) {\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      } else {\n        opts = existingOpts;\n      }\n      try {\n        attrValues = {};\n        materializedInput = [];\n        recordsProcessed = 0;\n        PivotData.forEachRecord(input, opts.derivedAttributes, function(record) {\n          var attr, base, ref, value;\n          if (!opts.filter(record)) {\n            return;\n          }\n          materializedInput.push(record);\n          for (attr in record) {\n            if (!hasProp.call(record, attr)) continue;\n            if (attrValues[attr] == null) {\n              attrValues[attr] = {};\n              if (recordsProcessed > 0) {\n                attrValues[attr][\"null\"] = recordsProcessed;\n              }\n            }\n          }\n          for (attr in attrValues) {\n            value = (ref = record[attr]) != null ? ref : \"null\";\n            if ((base = attrValues[attr])[value] == null) {\n              base[value] = 0;\n            }\n            attrValues[attr][value]++;\n          }\n          return recordsProcessed++;\n        });\n        uiTable = $(\"<table>\", {\n          \"class\": \"pvtUi\"\n        }).attr(\"cellpadding\", 5);\n        rendererControl = $(\"<td>\");\n        renderer = $(\"<select>\").addClass('pvtRenderer').appendTo(rendererControl).bind(\"change\", function() {\n          return refresh();\n        });\n        ref = opts.renderers;\n        for (x in ref) {\n          if (!hasProp.call(ref, x)) continue;\n          $(\"<option>\").val(x).html(x).appendTo(renderer);\n        }\n        if (!$.isEmptyObject(opts.exporters)) {\n          exporter = $(\"<select>\").addClass('pvtExporter').appendTo(rendererControl);\n          exportButton = $(\"<button>\", {\n            type: \"button\"\n          }).text(opts.localeStrings[\"export\"]).addClass('pvtExporterButton').appendTo(rendererControl).bind(\"click\", function() {\n            return pivotTableExporter();\n          });\n          ref1 = opts.exporters;\n          for (x in ref1) {\n            if (!hasProp.call(ref1, x)) continue;\n            $(\"<option>\").val(x).html(x).appendTo(exporter);\n          }\n        }\n        unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused');\n        shownAttributes = (function() {\n          var results;\n          results = [];\n          for (a in attrValues) {\n            if (indexOf.call(opts.hiddenAttributes, a) < 0) {\n              results.push(a);\n            }\n          }\n          return results;\n        })();\n        unusedAttrsVerticalAutoOverride = false;\n        if (opts.unusedAttrsVertical === \"auto\") {\n          unusedAttrsVerticalAutoCutoff = 120;\n        } else {\n          unusedAttrsVerticalAutoCutoff = parseInt(opts.unusedAttrsVertical);\n        }\n        if (!isNaN(unusedAttrsVerticalAutoCutoff)) {\n          attrLength = 0;\n          for (l = 0, len1 = shownAttributes.length; l < len1; l++) {\n            a = shownAttributes[l];\n            attrLength += a.length;\n          }\n          unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff;\n        }\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          unused.addClass('pvtVertList');\n        } else {\n          unused.addClass('pvtHorizList');\n        }\n        fn = function(attr) {\n          var attrElem, checkContainer, closeFilterBox, controls, filterItem, filterItemExcluded, finalButtons, hasExcludedItem, len2, n, placeholder, ref2, sorter, triangleLink, v, value, valueCount, valueList, values;\n          values = (function() {\n            var results;\n            results = [];\n            for (v in attrValues[attr]) {\n              results.push(v);\n            }\n            return results;\n          })();\n          hasExcludedItem = false;\n          valueList = $(\"<div>\").addClass('pvtFilterBox').hide();\n          valueList.append($(\"<h4>\").append($(\"<span>\").text(attr), $(\"<span>\").addClass(\"count\").text(\"(\" + values.length + \")\")));\n          if (values.length > opts.menuLimit) {\n            valueList.append($(\"<p>\").html(opts.localeStrings.tooMany));\n          } else {\n            if (values.length > 5) {\n              controls = $(\"<p>\").appendTo(valueList);\n              sorter = getSort(opts.sorters, attr);\n              placeholder = opts.localeStrings.filterResults;\n              $(\"<input>\", {\n                type: \"text\"\n              }).appendTo(controls).attr({\n                placeholder: placeholder,\n                \"class\": \"pvtSearch\"\n              }).bind(\"keyup\", function() {\n                var accept, accept_gen, filter;\n                filter = $(this).val().toLowerCase().trim();\n                accept_gen = function(prefix, accepted) {\n                  return function(v) {\n                    var real_filter, ref2;\n                    real_filter = filter.substring(prefix.length).trim();\n                    if (real_filter.length === 0) {\n                      return true;\n                    }\n                    return ref2 = Math.sign(sorter(v.toLowerCase(), real_filter)), indexOf.call(accepted, ref2) >= 0;\n                  };\n                };\n                accept = filter.startsWith(\">=\") ? accept_gen(\">=\", [1, 0]) : filter.startsWith(\"<=\") ? accept_gen(\"<=\", [-1, 0]) : filter.startsWith(\">\") ? accept_gen(\">\", [1]) : filter.startsWith(\"<\") ? accept_gen(\"<\", [-1]) : filter.startsWith(\"~\") ? function(v) {\n                  if (filter.substring(1).trim().length === 0) {\n                    return true;\n                  }\n                  return v.toLowerCase().match(filter.substring(1));\n                } : function(v) {\n                  return v.toLowerCase().indexOf(filter) !== -1;\n                };\n                return valueList.find('.pvtCheckContainer p label span.value').each(function() {\n                  if (accept($(this).text())) {\n                    return $(this).parent().parent().show();\n                  } else {\n                    return $(this).parent().parent().hide();\n                  }\n                });\n              });\n              controls.append($(\"<br>\"));\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectAll).bind(\"click\", function() {\n                valueList.find(\"input:visible:not(:checked)\").prop(\"checked\", true).toggleClass(\"changed\");\n                return false;\n              });\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectNone).bind(\"click\", function() {\n                valueList.find(\"input:visible:checked\").prop(\"checked\", false).toggleClass(\"changed\");\n                return false;\n              });\n            }\n            checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList);\n            ref2 = values.sort(getSort(opts.sorters, attr));\n            for (n = 0, len2 = ref2.length; n < len2; n++) {\n              value = ref2[n];\n              valueCount = attrValues[attr][value];\n              filterItem = $(\"<label>\");\n              filterItemExcluded = false;\n              if (opts.inclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.inclusions[attr], value) < 0);\n              } else if (opts.exclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.exclusions[attr], value) >= 0);\n              }\n              hasExcludedItem || (hasExcludedItem = filterItemExcluded);\n              $(\"<input>\").attr(\"type\", \"checkbox\").addClass('pvtFilter').attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr, value]).appendTo(filterItem).bind(\"change\", function() {\n                return $(this).toggleClass(\"changed\");\n              });\n              filterItem.append($(\"<span>\").addClass(\"value\").text(value));\n              filterItem.append($(\"<span>\").addClass(\"count\").text(\"(\" + valueCount + \")\"));\n              checkContainer.append($(\"<p>\").append(filterItem));\n            }\n          }\n          closeFilterBox = function() {\n            if (valueList.find(\"[type='checkbox']\").length > valueList.find(\"[type='checkbox']:checked\").length) {\n              attrElem.addClass(\"pvtFilteredAttribute\");\n            } else {\n              attrElem.removeClass(\"pvtFilteredAttribute\");\n            }\n            valueList.find('.pvtSearch').val('');\n            valueList.find('.pvtCheckContainer p').show();\n            return valueList.hide();\n          };\n          finalButtons = $(\"<p>\").appendTo(valueList);\n          if (values.length <= opts.menuLimit) {\n            $(\"<button>\", {\n              type: \"button\"\n            }).text(opts.localeStrings.apply).appendTo(finalButtons).bind(\"click\", function() {\n              if (valueList.find(\".changed\").removeClass(\"changed\").length) {\n                refresh();\n              }\n              return closeFilterBox();\n            });\n          }\n          $(\"<button>\", {\n            type: \"button\"\n          }).text(opts.localeStrings.cancel).appendTo(finalButtons).bind(\"click\", function() {\n            valueList.find(\".changed:checked\").removeClass(\"changed\").prop(\"checked\", false);\n            valueList.find(\".changed:not(:checked)\").removeClass(\"changed\").prop(\"checked\", true);\n            return closeFilterBox();\n          });\n          triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\").bind(\"click\", function(e) {\n            var left, ref3, top;\n            ref3 = $(e.currentTarget).position(), left = ref3.left, top = ref3.top;\n            return valueList.css({\n              left: left + 10,\n              top: top + 10\n            }).show();\n          });\n          attrElem = $(\"<li>\").addClass(\"axis_\" + i).append($(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink));\n          if (hasExcludedItem) {\n            attrElem.addClass('pvtFilteredAttribute');\n          }\n          return unused.append(attrElem).append(valueList);\n        };\n        for (i in shownAttributes) {\n          if (!hasProp.call(shownAttributes, i)) continue;\n          attr = shownAttributes[i];\n          fn(attr);\n        }\n        tr1 = $(\"<tr>\").appendTo(uiTable);\n        aggregator = $(\"<select>\").addClass('pvtAggregator').bind(\"change\", function() {\n          return refresh();\n        });\n        ref2 = opts.aggregators;\n        for (x in ref2) {\n          if (!hasProp.call(ref2, x)) continue;\n          aggregator.append($(\"<option>\").val(x).html(x));\n        }\n        ordering = {\n          key_a_to_z: {\n            rowSymbol: \"&varr;\",\n            colSymbol: \"&harr;\",\n            next: \"value_a_to_z\"\n          },\n          value_a_to_z: {\n            rowSymbol: \"&darr;\",\n            colSymbol: \"&rarr;\",\n            next: \"value_z_to_a\"\n          },\n          value_z_to_a: {\n            rowSymbol: \"&uarr;\",\n            colSymbol: \"&larr;\",\n            next: \"key_a_to_z\"\n          }\n        };\n        rowOrderArrow = $(\"<a>\", {\n          role: \"button\"\n        }).addClass(\"pvtRowOrder\").data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol).bind(\"click\", function() {\n          $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n          $(this).html(ordering[$(this).data(\"order\")].rowSymbol);\n          return refresh();\n        });\n        colOrderArrow = $(\"<a>\", {\n          role: \"button\"\n        }).addClass(\"pvtColOrder\").data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol).bind(\"click\", function() {\n          $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n          $(this).html(ordering[$(this).data(\"order\")].colSymbol);\n          return refresh();\n        });\n        $(\"<td>\").addClass('pvtVals').appendTo(tr1).append(aggregator).append(rowOrderArrow).append(colOrderArrow).append($(\"<br>\"));\n        $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1);\n        tr2 = $(\"<tr>\").appendTo(uiTable);\n        tr2.append($(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\"));\n        pivotTable = $(\"<td>\").attr(\"valign\", \"top\").addClass('pvtRendererArea').appendTo(tr2);\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          uiTable.find('tr:nth-child(1)').prepend(rendererControl);\n          uiTable.find('tr:nth-child(2)').prepend(unused);\n        } else {\n          uiTable.prepend($(\"<tr>\").append(rendererControl).append(unused));\n        }\n        this.html(uiTable);\n        ref3 = opts.cols;\n        for (n = 0, len2 = ref3.length; n < len2; n++) {\n          x = ref3[n];\n          this.find(\".pvtCols\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        ref4 = opts.rows;\n        for (o = 0, len3 = ref4.length; o < len3; o++) {\n          x = ref4[o];\n          this.find(\".pvtRows\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        if (opts.aggregatorName != null) {\n          this.find(\".pvtAggregator\").val(opts.aggregatorName);\n        }\n        if (opts.rendererName != null) {\n          this.find(\".pvtRenderer\").val(opts.rendererName);\n        }\n        initialRender = true;\n        refreshDelayed = (function(_this) {\n          return function() {\n            var pivotUIOptions, subopts, unusedAttrsContainer;\n            subopts = getRenderOptions();\n            pivotTable.pivot(materializedInput, subopts);\n            pivotUIOptions = $.extend({}, opts, {\n              cols: subopts.cols,\n              rows: subopts.rows,\n              colOrder: subopts.colOrder,\n              rowOrder: subopts.rowOrder,\n              vals: subopts.vals,\n              exclusions: subopts.exclusions,\n              inclusions: subopts.inclusions,\n              inclusionsInfo: subopts.inclusions,\n              aggregatorName: subopts.aggregatorName,\n              rendererName: subopts.rendererName\n            });\n            _this.data(\"pivotUIOptions\", pivotUIOptions);\n            if (opts.autoSortUnusedAttrs) {\n              unusedAttrsContainer = _this.find(\"td.pvtUnused.pvtAxisContainer\");\n              $(unusedAttrsContainer).children(\"li\").sort(function(a, b) {\n                return naturalSort($(a).text(), $(b).text());\n              }).appendTo(unusedAttrsContainer);\n            }\n            pivotTable.css(\"opacity\", 1);\n            if (opts.onRefresh != null) {\n              return opts.onRefresh(pivotUIOptions);\n            }\n          };\n        })(this);\n        refresh = (function(_this) {\n          return function() {\n            pivotTable.css(\"opacity\", 0.5);\n            return setTimeout(refreshDelayed, 10);\n          };\n        })(this);\n        getRenderOptions = (function(_this) {\n          return function() {\n            var exclusions, inclusions, len4, newDropdown, numInputsToProcess, pvtVals, q, ref5, ref6, s, subopts, vals;\n            subopts = {\n              derivedAttributes: opts.derivedAttributes,\n              localeStrings: opts.localeStrings,\n              rendererOptions: opts.rendererOptions,\n              sorters: opts.sorters,\n              cols: [],\n              rows: [],\n              dataClass: opts.dataClass\n            };\n            numInputsToProcess = (ref5 = opts.aggregators[aggregator.val()]([])().numInputs) != null ? ref5 : 0;\n            vals = [];\n            _this.find(\".pvtRows li span.pvtAttr\").each(function() {\n              return subopts.rows.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtCols li span.pvtAttr\").each(function() {\n              return subopts.cols.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n              if (numInputsToProcess === 0) {\n                return $(this).remove();\n              } else {\n                numInputsToProcess--;\n                if ($(this).val() !== \"\") {\n                  return vals.push($(this).val());\n                }\n              }\n            });\n            if (numInputsToProcess !== 0) {\n              pvtVals = _this.find(\".pvtVals\");\n              for (x = q = 0, ref6 = numInputsToProcess; 0 <= ref6 ? q < ref6 : q > ref6; x = 0 <= ref6 ? ++q : --q) {\n                newDropdown = $(\"<select>\").addClass('pvtAttrDropdown').append($(\"<option>\")).bind(\"change\", function() {\n                  return refresh();\n                });\n                for (s = 0, len4 = shownAttributes.length; s < len4; s++) {\n                  attr = shownAttributes[s];\n                  newDropdown.append($(\"<option>\").val(attr).text(attr));\n                }\n                pvtVals.append(newDropdown);\n              }\n            }\n            if (initialRender) {\n              vals = opts.vals;\n              i = 0;\n              _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n                $(this).val(vals[i]);\n                return i++;\n              });\n              initialRender = false;\n            }\n            subopts.aggregatorName = aggregator.val();\n            subopts.vals = vals;\n            subopts.aggregator = opts.aggregators[aggregator.val()](vals);\n            subopts.renderer = opts.renderers[renderer.val()];\n            subopts.rendererName = renderer.val();\n            subopts.rowOrder = rowOrderArrow.data(\"order\");\n            subopts.colOrder = colOrderArrow.data(\"order\");\n            exclusions = {};\n            _this.find('input.pvtFilter').not(':checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                return exclusions[filter[0]].push(filter[1]);\n              } else {\n                return exclusions[filter[0]] = [filter[1]];\n              }\n            });\n            inclusions = {};\n            _this.find('input.pvtFilter:checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                if (inclusions[filter[0]] != null) {\n                  return inclusions[filter[0]].push(filter[1]);\n                } else {\n                  return inclusions[filter[0]] = [filter[1]];\n                }\n              }\n            });\n            subopts.filter = function(record) {\n              var excludedItems, k, ref7, ref8;\n              if (!opts.filter(record)) {\n                return false;\n              }\n              for (k in exclusions) {\n                excludedItems = exclusions[k];\n                if (ref7 = \"\" + ((ref8 = record[k]) != null ? ref8 : 'null'), indexOf.call(excludedItems, ref7) >= 0) {\n                  return false;\n                }\n              }\n              return true;\n            };\n            return $.extend(true, subopts, {\n              inclusions: inclusions,\n              exclusions: exclusions\n            });\n          };\n        })(this);\n        pivotTableExporter = (function(_this) {\n          return function() {\n            var e, pivotData, subopts;\n            subopts = $.extend(true, getRenderOptions(), {\n              exporter: opts.exporters[exporter.val()]\n            });\n            try {\n              pivotData = new opts.dataClass(materializedInput, subopts);\n              try {\n                return subopts.exporter(pivotData, subopts.rendererOptions);\n              } catch (error) {\n                e = error;\n                if (typeof console !== \"undefined\" && console !== null) {\n                  return console.error(e.stack);\n                }\n              }\n            } catch (error) {}\n          };\n        })(this);\n        refresh();\n        this.find(\".pvtAxisContainer\").sortable({\n          update: function(e, ui) {\n            if (ui.sender == null) {\n              return refresh();\n            }\n          },\n          connectWith: this.find(\".pvtAxisContainer\"),\n          items: 'li',\n          placeholder: 'pvtPlaceholder'\n        });\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        this.html(opts.localeStrings.uiRenderError);\n      }\n      return this;\n    };\n\n    /*\n    Heatmap post-processing\n     */\n    $.fn.heatmap = function(scope, opts) {\n      var colorScaleGenerator, heatmapper, i, j, l, n, numCols, numRows, ref, ref1, ref2;\n      if (scope == null) {\n        scope = \"heatmap\";\n      }\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      colorScaleGenerator = opts != null ? (ref = opts.heatmap) != null ? ref.colorScaleGenerator : void 0 : void 0;\n      if (colorScaleGenerator == null) {\n        colorScaleGenerator = function(values) {\n          var max, min;\n          min = Math.min.apply(Math, values);\n          max = Math.max.apply(Math, values);\n          return function(x) {\n            var nonRed;\n            nonRed = 255 - Math.round(255 * (x - min) / (max - min));\n            return \"rgb(255,\" + nonRed + \",\" + nonRed + \")\";\n          };\n        };\n      }\n      heatmapper = (function(_this) {\n        return function(scope) {\n          var colorScale, forEachCell, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          colorScale = colorScaleGenerator(values);\n          return forEachCell(function(x, elem) {\n            return elem.css(\"background-color\", colorScale(x));\n          });\n        };\n      })(this);\n      switch (scope) {\n        case \"heatmap\":\n          heatmapper(\".pvtVal\");\n          break;\n        case \"rowheatmap\":\n          for (i = l = 0, ref1 = numRows; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {\n            heatmapper(\".pvtVal.row\" + i);\n          }\n          break;\n        case \"colheatmap\":\n          for (j = n = 0, ref2 = numCols; 0 <= ref2 ? n < ref2 : n > ref2; j = 0 <= ref2 ? ++n : --n) {\n            heatmapper(\".pvtVal.col\" + j);\n          }\n      }\n      heatmapper(\".pvtTotal.rowTotal\");\n      heatmapper(\".pvtTotal.colTotal\");\n      return this;\n    };\n\n    /*\n    Barchart post-processing\n     */\n    return $.fn.barchart = function() {\n      var barcharter, i, l, numCols, numRows, ref;\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      barcharter = (function(_this) {\n        return function(scope) {\n          var forEachCell, max, scaler, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          max = Math.max.apply(Math, values);\n          scaler = function(x) {\n            return 100 * x / (1.4 * max);\n          };\n          return forEachCell(function(x, elem) {\n            var text, wrapper;\n            text = elem.text();\n            wrapper = $(\"<div>\").css({\n              \"position\": \"relative\",\n              \"height\": \"55px\"\n            });\n            wrapper.append($(\"<div>\").css({\n              \"position\": \"absolute\",\n              \"bottom\": 0,\n              \"left\": 0,\n              \"right\": 0,\n              \"height\": scaler(x) + \"%\",\n              \"background-color\": \"gray\"\n            }));\n            wrapper.append($(\"<div>\").text(text).css({\n              \"position\": \"relative\",\n              \"padding-left\": \"5px\",\n              \"padding-right\": \"5px\"\n            }));\n            return elem.css({\n              \"padding\": 0,\n              \"padding-top\": \"5px\",\n              \"text-align\": \"center\"\n            }).html(wrapper);\n          });\n        };\n      })(this);\n      for (i = l = 0, ref = numRows; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {\n        barcharter(\".pvtVal.row\" + i);\n      }\n      barcharter(\".pvtTotal.colTotal\");\n      return this;\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=pivot.js.map\n"]}